let map = [
  ['.', '.', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#'],
  ['.', '#', '#', '.', '.', '#', '#', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '#', '.', '#', '.', '.', '.', '.', '#'],
  ['.', '#', '#', '.', '#', '.', '.', '.', '.', '#', '#', '#', '.', '.', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.'],
  ['#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '#', '.', '#'],
  ['.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '.', '.', '#', '#', '.', '#', '#', '#'],
  ['.', '.', '#', '#', '#', '#', '.', '#', '#', '.', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '.', '.', '#', '#'],
  ['.', '.', '.', '.', '#', '#', '.', '#', '#', '#', '.', '.', '#', '.', '#', '.', '.', '#', '.', '.', '.', '#', '#', '#', '#'],
  ['.', '#', '.', '#', '#', '.', '#', '#', '.', '#', '.', '.', '#', '#', '.', '.', '.', '#', '#', '.', '#', '#', '#', '.', '.'],
  ['.', '#', '#', '#', '#', '#', '#', '.', '.', '#', '.', '.', '#', '.', '#', '#', '#', '#', '#', '.', '.', '.', '.', '#', '#'],
  ['#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#', '#', '#'],
  ['.', '#', '.', '#', '.', '#', '.', '.', '#', '.', '#', '#', '.', '#', '.', '.', '#', '#', '#', '.', '.', '.', '#', '.', '.'],
  ['.', '#', '.', '#', '#', '.', '#', '.', '#', '#', '#', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '#', '#', '.'],
  ['#', '#', '.', '.', '#', '#', '#', '.', '#', '#', '#', '.', '.', '#', '#', '.', '.', '.', '#', '.', '#', '#', '.', '#', '#'],
  ['#', '#', '.', '#', '.', '#', '#', '.', '.', '#', '.', '.', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.', '#', '#', '#'],
  ['#', '#', '.', '.', '#', '.', '.', '#', '#', '#', '.', '#', '.', '.', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.'],
  ['.', '#', '#', '.', '#', '#', '#', '#', '#', '.', '.', '#', '#', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '#'],
  ['.', '.', '#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '#', '.', '#', '#', '.', '.'],
  ['#', '.', '#', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '#', '#', '.', '#', '.', '#', '#', '.', '#', '.'],
  ['.', '#', '.', '.', '#', '.', '#', '.', '#', '.', '.', '#', '.', '#', '#', '#', '#', '.', '.', '#', '.', '#', '#', '#', '#'],
  ['.', '#', '#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '#', '.', '#', '.', '#', '#', '#', '.', '.'],
  ['.', '.', '#', '#', '.', '#', '.', '#', '.', '#', '#', '.', '.', '#', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#', '.'],
  ['#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#'],
  ['.', '.', '#', '.', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '.', '.', '#', '#', '#', '#', '.', '.', '.', '#'],
  ['#', '.', '#', '#', '.', '.', '#', '.', '#', '.', '#', '#', '#', '#', '.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '#'],
  ['#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '.', '#', '#', '.', '.', '#', '.', '#', '#', '#', '.', '.', '.', '.', '#'],
];

let testMap = [
  ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '#', '.', '.', '.'],
  ['.', '.', '.', '#', '.', '.', '.', '.', ','],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.']
];

// map = testMap; // debug

const NUM_BURSTS = 10000000;
const DIRECTIONS = ['U', 'R', 'D', 'L'];

let currentPosition = [Math.floor(map.length / 2), Math.floor(map[0].length / 2)];
let facing = 'U';
let infectedCount = 0;

const padTopAndBottom = map => {
  let newMap = [];
  let l = map[0].length;

  newMap.push(new Array(l).fill('.'));

  for (let i = 0; i < map.length; i++) {
    newMap.push(map[i]);
  }

  newMap.push(new Array(l).fill('.'));
  return newMap;
};

const padLeftAndRight = map => {
  for (let i = 0; i < map.length; i++) {
    map[i].unshift('.');
    map[i].push('.');
  }

  return map;
}

const getNextDirection = (state, facing) => {
  const idx = DIRECTIONS.indexOf(facing);
  let nextIdx = 'fuck';

  if (state === '#') { // right
    nextIdx = (idx + 1) % DIRECTIONS.length;
  } else if (state === '.') { // left
    nextIdx = idx === 0 ? 3 : (idx - 1);
  } else if (state === 'F') {
    nextIdx = (idx + 2) % DIRECTIONS.length; // go back
  } else { // same dir
    nextIdx = idx;
  }

  return DIRECTIONS[nextIdx];
}

for (let i = 0; i < NUM_BURSTS; i++) {
  let currentState = map[currentPosition[0]][currentPosition[1]];

  facing = getNextDirection(currentState, facing);

  if (currentState === '#') { // infected
    map[currentPosition[0]][currentPosition[1]] = 'F';
  } else if (currentState === 'W') { // weakened
    map[currentPosition[0]][currentPosition[1]] = '#';
    infectedCount++;
  } else if (currentState === 'F') { // flagged
    map[currentPosition[0]][currentPosition[1]] = '.';
  } else { // clean
    map[currentPosition[0]][currentPosition[1]] = 'W';
  }

  // move
  if (facing === 'U') {
    currentPosition = [currentPosition[0] - 1, currentPosition[1]];
  } else if (facing === 'R') {
    currentPosition = [currentPosition[0], currentPosition[1] + 1];
  } else if (facing === 'D') {
    currentPosition = [currentPosition[0] + 1, currentPosition[1]];
  } else {
    currentPosition = [currentPosition[0], currentPosition[1] - 1];
  }

  // add top and bottom rows
  if (currentPosition[0] === -1 || currentPosition[0] >= map.length) {
    map = padTopAndBottom(map);

    if (currentPosition[0] === -1) {
      currentPosition[0] = 0;
    } else {
      currentPosition[0]++;
    }
  } else if (currentPosition[1] === -1 || currentPosition[1] >= map[0].length) { // pad left and right
    map = padLeftAndRight(map);

    if (currentPosition[1] === -1) {
      currentPosition[1] = 0;
    } else {
      currentPosition[1]++;
    }
  }
}

console.log(infectedCount);
